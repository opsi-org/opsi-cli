image: docker.uib.gmbh/opsi/dev/pybuilder-ssl3:uib-python-3.11

stages:
  - test_python
  - build
  - package
  - test_package

pytest-darwin:
  stage: test_python
  tags:
    - catalina-py311-x64
  script:
    - poetry lock --no-update --no-cache
    - poetry install
    - poetry run pytest --tb=short -o junit_family=xunit2 --junitxml=testreport_darwin.xml --cov-append --cov opsicli --cov plugins --cov-report term --cov-report xml -v tests
    - mv .coverage coverage_darwin
  artifacts:
    name: "opsi-cli_test_darwin"
    paths:
      - coverage.xml
      - testreport_darwin.xml
      - coverage_darwin
    expire_in: 3 days

pytest-windows:
  when: manual
  stage: test_python
  tags:
    - win10-py311-x86
  script:
    - poetry lock --no-update --no-cache
    - poetry install
    - poetry run pytest --tb=short -o junit_family=xunit2 --junitxml=testreport_windows.xml --cov-append --cov opsicli --cov plugins --cov-report term --cov-report xml -v tests
    - Rename-Item -Path .coverage -NewName coverage_windows
  artifacts:
    name: "opsi-cli_test_windows"
    paths:
      - coverage.xml
      - testreport_windows.xml
      - coverage_windows
    expire_in: 3 days

pytest-linux:
  when: manual
  stage: test_python
  services:
    - name: mysql:latest
      command:
        - --max_connections=1000
        - --default-authentication-plugin=mysql_native_password
    - name: redislabs/redistimeseries:latest
      alias: redis
  variables:
    MYSQL_ROOT_PASSWORD: "opsi"
    MYSQL_DATABASE: "opsitest"
    MYSQL_USER: "opsi"
    MYSQL_PASSWORD: "opsi"
    MYSQL_HOST: mysql
    REDIS_HOST: redis
    OPSI_ADMIN_PASSWORD: vhahd8usaz # also hardcoded in tests/utils.py
    OPSI_HOST_ROLE: configserver
    OPSI_HOST_ID: "test.uib.gmbh"
    OPSI_TFTPBOOT: "false"
    OPSICONFD_RESTORE_BACKUP_URL: "http://binaryindex.uib.gmbh/development/testbackup/all/all/testbackup_all_all_1.1.tar.gz"
  image:
    name: docker.uib.gmbh/opsi/opsi-server:4.3-development
    entrypoint: [""]
  script:
    - bash /entrypoint.sh &
    - apt update
    - apt --yes install --no-install-recommends curl build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev
    - wget https://www.python.org/ftp/python/3.11.1/Python-3.11.1.tgz
    - tar -xvf Python-3.11.1.tgz
    - cd Python-3.11.1
    - ./configure > /dev/null
    - make -j 2 build_all > /dev/null
    - make EXTRATESTOPTS=--list-tests altinstall
    - cd ..
    - python3.11 -m pip install certifi
    - curl -sSL https://install.python-poetry.org | SSL_CERT_FILE=$(python3.11 -c "import certifi;print(certifi.where())") python3.11 -
    - ln -s /root/.local/bin/poetry /usr/local/bin/poetry
    - while ! nc -v -z -w3 localhost 4447 > /dev/null 2>&1; do sleep 1; done
    - source /entrypoint.sh set_environment_vars # to set hosts for redis/grafana
    - poetry lock --no-update --no-cache
    - poetry install
    - poetry run pytest --tb=short -o junit_family=xunit2 --junitxml=testreport_linux.xml --cov-append --cov opsicli --cov plugins --cov-report term --cov-report xml -v tests
    - mv .coverage coverage_linux
  artifacts:
    name: "opsi-cli_test_linux"
    paths:
      - coverage.xml
      - testreport_linux.xml
      - coverage_linux
    expire_in: 3 days

pylint-pytest:
  when: manual
  stage: test_python
  needs:
    # We want to combine test coverage from all test jobs
    - job: pytest-windows
      artifacts: true
    - job: pytest-darwin
      artifacts: true
    - job: pytest-linux
      artifacts: true
  script:
    - apt-get update
    - apt-get --yes --allow-downgrades install libsqlite3-0=3.16.2-5+deb9u1
    - apt-get --yes install sqlite3
    - poetry lock --no-update --no-cache
    - poetry install
    - poetry run pylint --disable=R,fixme opsicli plugins tests
    - poetry run flake8 opsicli plugins tests
    - poetry run mypy opsicli tests
    - rm -rf .mypy_cache
    - "for plugindir in $(find plugins/*/python/*.py | cut -d'/' -f1-2  | sort | uniq); do echo $plugindir; poetry run mypy --explicit-package-bases $plugindir; done"
    # Convert file.path to a relative path in coverage databases
    - for db in coverage_*; do sqlite3 $db 'update file set path=replace(substr(path,instr(path,"opsicli")),"\","/");'; done
    - for db in coverage_*; do sqlite3 $db 'update file set path=replace(substr(path,instr(path,"plugins")),"\","/");'; done
    - echo -e '[run]\nrelative_files = True\n' > .coveragerc
    - poetry run coverage combine coverage_*
    - poetry run coverage xml
    - poetry run coverage report
    - poetry run opsi-dev-tool -l info --testreport-merge testreport_*.xml testreport.xml
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+)%/'
  artifacts:
    name: "opsi-cli_test"
    paths:
      - coverage.xml
    expire_in: 3 days
    reports:
      junit: testreport.xml

linux-pyinstaller:
  stage: build
  script:
    - export LC_ALL=C.UTF-8
    - wget "$OPSIDEVTOOLS_URL_LINUX_X64" -O - | tar xzf -
    - mv opsi-dev-tool opsi-dev-cli
    - ./opsi-dev-cli binary pull ziplaunch
    - poetry lock --no-update --no-cache
    - poetry install
    - poetry run ./opsi-dev-cli -l info pyinstaller build
    - ./ziplaunch/ziplaunch dist/opsicli ziplaunch.ini opsi-cli
    - ./opsi-cli --version
    - ./opsi-cli --non-interactive plugin new cicdtest --version=1.0
    - sed -i 's/import rich_click as click/import rich_click as click; import flask/' cicdtest/python/__init__.py
    - ./opsi-cli -l 7 plugin add cicdtest
    - time ./opsi-cli --help
    - '[ "$CI_COMMIT_TAG" = "" ] && ./opsi-dev-cli -l info binary push opsi-cli --prerelease="$CI_JOB_ID"'
    - '[ "$CI_COMMIT_TAG" = "" ] || ./opsi-dev-cli -l info binary push opsi-cli'
    - mv ./opsi-cli CLIENT_DATA/opsi-cli-linux
  artifacts:
    name: opsi-cli-linux
    paths:
      - CLIENT_DATA/opsi-cli-linux

# arm binary pushed to binaryindex, but not included in opsi-package (no arm clients)
linux-arm-pyinstaller:
  stage: build
  tags:
    - linux-arm64
  script:
    - export LC_ALL=C.UTF-8
    - wget "$OPSIDEVTOOLS_URL_LINUX_ARM64" -O - | tar xzf -
    - mv opsi-dev-tool opsi-dev-cli
    - ./opsi-dev-cli binary pull ziplaunch
    - poetry lock --no-update --no-cache
    - poetry install
    - poetry run ./opsi-dev-cli -l info pyinstaller build
    - ./ziplaunch/ziplaunch dist/opsicli ziplaunch.ini opsi-cli
    - ./opsi-cli --version
    - ./opsi-cli --non-interactive plugin new cicdtest --version=1.0
    - sed -i 's/import rich_click as click/import rich_click as click; import flask/' cicdtest/python/__init__.py
    - ./opsi-cli -l 7 plugin add cicdtest
    - time ./opsi-cli --help
    - '[ "$CI_COMMIT_TAG" = "" ] && ./opsi-dev-cli -l info binary push opsi-cli --prerelease="$CI_JOB_ID"'
    - '[ "$CI_COMMIT_TAG" = "" ] || ./opsi-dev-cli -l info binary push opsi-cli'

macos-pyinstaller:
  stage: build
  tags:
    - catalina-py311-x64
  script:
    - export LC_ALL=en_US.UTF-8
    - poetry lock --no-update --no-cache
    - poetry install
    - curl -o opsi-dev-tools.tar.gz "$OPSIDEVTOOLS_URL_DARWIN_X64"
    - tar -xvf opsi-dev-tools.tar.gz
    - mv opsi-dev-tool opsi-dev-cli
    - ./opsi-dev-cli binary pull ziplaunch
    - poetry run ./opsi-dev-cli -l info pyinstaller build

    - mkdir ziplaunch-build
    - ./opsi-dev-cli apple create-app --identifier org.opsi.opsi-cli --executable-name opsi-cli --version 1.0 ziplaunch-build opsi-cli
    #- cp macos-start.sh ziplaunch-build/opsi-cli.app/Contents/MacOS/opsi-cli
    #- chmod +x ziplaunch-build/opsi-cli.app/Contents/MacOS/opsi-cli
    - rm -r ziplaunch-build/opsi-cli.app/Contents/MacOS
    - mv dist/opsicli ziplaunch-build/opsi-cli.app/Contents/MacOS
    #- mv dist/opsi-cli.app ziplaunch-build/
    - ./opsi-dev-cli -l info apple sign-and-notarize --print-log ziplaunch-build/opsi-cli.app
    - ./ziplaunch/ziplaunch ziplaunch-build ziplaunch.ini opsi-cli
    - ./opsi-dev-cli -l info apple sign-and-notarize --macho-fix --print-log opsi-cli

    - ./opsi-cli --version
    - ./opsi-cli --non-interactive plugin new cicdtest --version=1.0
    - sed -i '' 's/import rich_click as click/import rich_click as click; import flask/' cicdtest/python/__init__.py
    - ./opsi-cli -l 7 plugin add cicdtest
    - time ./opsi-cli --help
    - '[ "$CI_COMMIT_TAG" = "" ] && ./opsi-dev-cli -l info binary push ./opsi-cli --prerelease="$CI_JOB_ID"'
    - '[ "$CI_COMMIT_TAG" = "" ] || ./opsi-dev-cli -l info binary push ./opsi-cli'
    - mv ./opsi-cli CLIENT_DATA/opsi-cli-macos
  artifacts:
    name: opsi-cli-macos
    paths:
      - CLIENT_DATA/opsi-cli-macos

windows-pyinstaller:
  when: manual
  stage: build
  tags:
    - win10-py311-x86
  script:
    # build python environment
    - poetry lock --no-update --no-cache
    - poetry install
    # get opsi-dev-tool
    - Invoke-WebRequest -UseBasicParsing -Uri "$OPSIDEVTOOLS_URL_WINDOWS_X86" -OutFile opsi-dev-tools.zip
    - Expand-Archive opsi-dev-tools.zip -DestinationPath .
    - .\opsi-dev-tool.exe --self-install -l info
    - $env:Path += ';C:\opsi.org\opsi-dev-cli' # To immediately have it in PATH
    # build opsi-cli binary
    - poetry run opsi-dev-cli -l info pyinstaller build
    # test opsi-cli binary
    - dist\opsi-cli.exe --version
    - dist\opsi-cli.exe --non-interactive plugin new cicdtest --version=1.0
    - (get-content cicdtest\python\__init__.py) | %{$_ -replace "import click","import click; import flask"} | Out-File -encoding ascii cicdtest\python\__init__.py
    - dist\opsi-cli.exe -l 7 plugin add cicdtest
    - powershell -command "Measure-Command { dist\opsi-cli.exe --help }"
    # sign opsi-cli binary
    - opsi-dev-tool -l info --signserver-sign dist\opsi-cli.exe
    # virus check of opsi-cli binary
    - opsi-dev-cli -l info --output-format summary virustotal check dist\opsi-cli.exe --allow-detections=10
    # upload and archive opsi-cli binary
    - if (! $CI_COMMIT_TAG) {opsi-dev-cli -l info binary push dist\opsi-cli.exe --prerelease="$CI_JOB_ID"}
    - if ($CI_COMMIT_TAG) {opsi-dev-cli -l info binary push dist\opsi-cli.exe}
    - move dist\opsi-cli.exe CLIENT_DATA\opsi-cli-windows.exe
  artifacts:
    name: opsi-cli-windows.exe
    paths:
      - CLIENT_DATA\opsi-cli-windows.exe

makeopsipackage:
  when: manual
  stage: package
  script:
    # Disregard any information from OPSI and write controlfile according to pyproject.toml version and CI_JOB_ID
    - version=$(cat pyproject.toml | grep -e "^version = " | cut -d \" -f 2)
    - package=1
    - '[ "$CI_COMMIT_TAG" = "" ] && sed -i "0,/version: $package\$/s/version: $package\$/version: $package.$CI_JOB_ID/" OPSI/control'
    - 'sed -i "/Product/,/version:/s/version: .*\$/version: $version/" OPSI/control'
    - opsi-dev-cli changelog from-git output
    - cp output/changelog.md OPSI/
    - opsi-makepackage --no-set-rights -l 6
    - upload-package opsi-cli*.opsi
  artifacts:
    name: controlfile
    paths:
      - OPSI/control

.runtest: &runtest |
  version=$(grep OPSI/control -A 10 -e "\[Product\]" | grep "version:" | tr -d "^a-zA-Z :")
  package=$(grep OPSI/control -A 5 -e "\[Package\]" | grep "version:" | tr -d "^a-zA-Z :")
  version="$version-$(echo $package | tr '.' '~')"
  opsi-dev-cli -l info jenkins test --versions="$version,$version,$version,$version,$version"

test_all_systems:
  stage: test_package
  script:
    - *runtest
  only:
    - tags

test_all_systems_manual:
  stage: test_package
  script:
    - *runtest
  when: manual
